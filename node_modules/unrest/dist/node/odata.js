"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var parser = require('odata-filter-parser');

module.exports = (function () {
  function Odata(query) {
    _classCallCheck(this, Odata);

    this._query = query;
  }

  _createClass(Odata, [{
    key: "toString",
    value: function toString() {
      var g = [],
          q = this._query;
      console.log(q);
      if (q.order.length > 0) {
        var b = "$orderby=";
        q.order.forEach(function (i) {
          b += i[0] + (i[1] == "desc" ? " desc" : "") + ",";
        });
        b = b.substring(0, b.length - 1);
        g.push(b);
      }
      if (q.skip) g.push("$skip=" + parseInt(q.skip));
      if (q.take) g.push("$top=" + parseInt(q.take));
      if (q.where.length > 0) {
        var b = "$filter=";
        q.where.forEach(function (i) {
          b += new parser.Predicate(i).serialize() + " and ";
        });
        b = b.substring(0, b.length - 5);
        g.push(b);
      }
      if (q.select.length > 0) g.push("$select=" + q.select.join(","));
      return g.join("&");
    }
  }]);

  return Odata;
})();