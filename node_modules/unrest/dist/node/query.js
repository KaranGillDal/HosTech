'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

module.exports = (function () {
  function Query() {
    _classCallCheck(this, Query);

    this._query = {
      order: [],
      select: [],
      where: [],
      skip: null,
      take: null
    };
  }

  _createClass(Query, [{
    key: 'orderBy',
    value: function orderBy() {
      var _this = this;

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      args.forEach(function (arg) {
        _this._query.order.push([arg[0] == '-' ? arg.substring(1, arg.length) : arg, arg[0] == '-' ? 'desc' : 'asc']);
      });
      return this;
    }
  }, {
    key: 'select',
    value: function select() {
      var _this2 = this;

      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      args.forEach(function (arg) {
        _this2._query.select.push(arg);
      });
      return this;
    }
  }, {
    key: 'where',
    value: function where(pred) {
      this._query.where.push(pred);
      return this;
    }
  }, {
    key: 'skip',
    value: function skip(amount) {
      this._query.skip = amount;
      return this;
    }
  }, {
    key: 'take',
    value: function take(amount) {
      this._query.take = amount;
      return this;
    }
  }]);

  return Query;
})();