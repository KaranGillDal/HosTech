var Operators={EQUALS:"eq",AND:"and",OR:"or",GREATER_THAN:"gt",GREATER_THAN_EQUAL:"ge",LESS_THAN:"lt",LESS_THAN_EQUAL:"le",LIKE:"like",IS_NULL:"is null",NOT_EQUAL:"ne",isUnary:function(e){var t=!1;return e===Operators.IS_NULL&&(t=!0),t},isLogical:function(e){return e===Operators.AND||e===Operators.OR}},Predicate=function(e){return e||(e={}),this.subject=e.subject,this.value=e.value,this.operator=e.operator?e.operator:Operators.EQUALS,this};Predicate.concat=function(e,t){if(arguments.length<3&&!(t instanceof Array&&t.length>=2))throw{key:"INSUFFICIENT_PREDICATES",msg:"At least two predicates are required"};if(!e||!Operators.isLogical(e))throw{key:"INVALID_LOGICAL",msg:"The operator is not representative of a logical operator."};var r,a=[];if(t instanceof Array)a=t;else for(var s=1;s<arguments.length;s++)a.push(arguments[s]);var i=a.length;if(r=new Predicate({subject:a[0],operator:e}),2===i)r.value=a[i-1];else{for(var n=[],o=1;o<i;o++)n.push(a[o]);r.value=Predicate.concat(e,n)}return r},Predicate.prototype.flatten=function(e){return e||(e=[]),Operators.isLogical(this.operator)?(e=e.concat(this.subject.flatten()),e=e.concat(this.value.flatten())):e.push(this),e},Predicate.prototype.serialize=function(){var e="";if(this.operator){if(void 0===this.subject||null===this.subject)throw{key:"INVALID_SUBJECT",msg:"The subject is required and is not specified."};if(Operators.isLogical(this.operator)&&(!(this.subject instanceof Predicate||this.value instanceof Predicate)||this.subject instanceof Predicate&&void 0===this.value))throw{key:"INVALID_LOGICAL",msg:"The predicate does not represent a valid logical expression."};if(e="(",this.operator===Operators.LIKE){var t="contains",r=this.value.lastIndexOf("*"),a=this.value.indexOf("*"),s=this.value;0===a&&r!==this.value.length-1?(t="endswith",s=s.substring(1)):r===this.value.length-1&&a===r?(t="startswith",s=s.substring(0,r)):0===a&&r===this.value.length-1&&(s=s.substring(1,r)),e+=t+"("+this.subject+",'"+s+"')"}else if(e+=(this.subject instanceof Predicate?this.subject.serialize():this.subject)+" "+this.operator,!Operators.isUnary(this.operator)){if(void 0===this.value||null===this.value)throw{key:"INVALID_VALUE",msg:"The value was required but was not defined."};e+=" ";var i=typeof this.value;if("string"===i)e+="'"+this.value+"'";else if("number"===i||"boolean"===i)e+=this.value;else if(this.value instanceof Predicate)e+=this.value.serialize();else{if(!(this.value instanceof Date))throw{key:"UNKNOWN_TYPE",msg:"Unsupported value type: "+typeof this.value,source:this.value};e+="datetimeoffset'"+this.value.toISOString()+"'"}}e+=")"}return e};var ODataParser=function(){"use strict";function e(e,t){var r="startsWith"===t?e[2]+"*":"endsWith"===t?"*"+e[2]:"*"+e[2]+"*";return new Predicate({subject:e[1],operator:Operators.LIKE,value:r})}function t(a){var s=!1,i=null;for(var n in r){var o=r[n];if(s)break;var u=a.match(o);if(u){switch(o){case r.parenthesis:if(u.length>2){if(u[2].indexOf(")")<u[2].indexOf("("))continue;i=t(u[2])}break;case r.andor:i=new Predicate({subject:t(u[1]),operator:u[2],value:t(u[3])});break;case r.op:if(i=new Predicate({subject:u[1],operator:u[2],value:u[3].indexOf("'")===-1?+u[3]:u[3]}),"string"==typeof i.value){var l=i.value.match(/^'(.*)'$/),c=i.value.match(/^datetimeoffset'(.*)'$/);l&&l.length>1?i.value=l[1]:c&&c.length>1&&(i.value=new Date(c[1]))}break;case r.startsWith:case r.endsWith:case r.contains:i=e(u,n)}s=!0}}return i}var r={parenthesis:/^([(](.*)[)])$/,andor:/^(.*?) (or|and)+ (.*)$/,op:/(\w*) (eq|gt|lt|ge|le|ne) (datetimeoffset'(.*)'|'(.*)'|[0-9]*)/,startsWith:/^startswith[(](.*),'(.*)'[)]/,endsWith:/^endswith[(](.*),'(.*)'[)]/,contains:/^contains[(](.*),'(.*)'[)]/};return{parse:function(e){if(!e||""===e)return null;var r=e.trim(),a={};return r.length>0&&(a=t(r)),a}}}();module.exports={Parser:ODataParser,Operators:Operators,Predicate:Predicate};